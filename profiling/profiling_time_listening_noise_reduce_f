Timer unit: 1e-06 s

Total time: 3.13063 s
File: /home/montoya/Desktop/VScode/pyramidman/pyramidman/noisereduce_optimized.py
Function: reduce_noise_optimized at line 29

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    29                                           def reduce_noise_optimized(
    30                                               audio_clip,
    31                                               noise_clip=None,
    32                                               precomputed_noise_parameters=None,
    33                                               n_grad_freq=2,
    34                                               n_grad_time=4,
    35                                               n_fft=2048,
    36                                               win_length=2048,
    37                                               hop_length=512,
    38                                               n_std_thresh=1.5,
    39                                               prop_decrease=1.0,
    40                                               pad_clipping=True,
    41                                               use_tensorflow=False
    42                                           ):
    43                                               """Remove noise from audio based upon a clip containing only noise
    44                                           
    45                                               Args:
    46                                                   audio_clip (array): The first parameter.
    47                                                   noise_clip (array): The second parameter.
    48                                                   n_grad_freq (int): how many frequency channels to smooth over with the mask.
    49                                                   n_grad_time (int): how many time channels to smooth over with the mask.
    50                                                   n_fft (int): number audio of frames between STFT columns.
    51                                                   win_length (int): Each frame of audio is windowed by `window()`. The window will be of length `win_length` and then padded with zeros to match `n_fft`..
    52                                                   hop_length (int):number audio of frames between STFT columns.
    53                                                   n_std_thresh (int): how many standard deviations louder than the mean dB of the noise (at each frequency level) to be considered signal
    54                                                   prop_decrease (float): To what extent should you decrease noise (1 = all, 0 = none)
    55                                                   pad_clipping (bool): Pad the signals with zeros to ensure that the reconstructed data is equal length to the data
    56                                                   use_tensorflow (bool): Use tensorflow as a backend for convolution and fft to speed up computation
    57                                                   verbose (bool): Whether to plot the steps of the algorithm
    58                                           
    59                                               Returns:
    60                                                   array: The recovered signal with noise subtracted
    61                                           
    62                                               """
    63                                               # load tensorflow if you are using it as a backend
    64       161       1087.0      6.8      0.0      if use_tensorflow:
    65                                                   use_tensorflow = load_tensorflow(verbose)
    66                                           
    67       161        604.0      3.8      0.0      if precomputed_noise_parameters is not None:
    68       161        535.0      3.3      0.0          noise_stft, noise_stft_db, mean_freq_noise, std_freq_noise, noise_thresh = precomputed_noise_parameters
    69                                               else:
    70                                                   noise_stft, noise_stft_db, mean_freq_noise, std_freq_noise, noise_thresh = noise_STFT_and_statistics(noise_clip,   n_grad_freq,
    71                                                                                                                                                        n_grad_time,
    72                                                                                                                                                        n_fft,
    73                                                                                                                                                        win_length,
    74                                                                                                                                                        hop_length,
    75                                                                                                                                                        n_std_thresh,
    76                                                                                                                                                        prop_decrease,
    77                                                                                                                                                        pad_clipping,
    78                                                                                                                                                        use_tensorflow)
    79                                               # pad signal with zeros to avoid extra frames being clipped if desired
    80       161        441.0      2.7      0.0      if pad_clipping:
    81       161        672.0      4.2      0.0          nsamp = len(audio_clip)
    82       161      62967.0    391.1      2.0          audio_clip = np.pad(audio_clip, [0, hop_length], mode="constant")
    83                                           
    84       161        696.0      4.3      0.0      sig_stft = _stft(
    85       161     335440.0   2083.5     10.7          audio_clip, n_fft, hop_length, win_length, use_tensorflow=use_tensorflow
    86                                               )
    87       161     102390.0    636.0      3.3      sig_stft_db = _amp_to_db(np.abs(sig_stft))
    88                                           
    89                                               # Calculate value to mask dB to
    90       161      98703.0    613.1      3.2      mask_gain_dB = np.min(_amp_to_db(np.abs(sig_stft)))
    91                                               # calculate the threshold for each frequency/time bin
    92       161        804.0      5.0      0.0      db_thresh = np.repeat(
    93       161       4541.0     28.2      0.1          np.reshape(noise_thresh, [1, len(mean_freq_noise)]),
    94       161       2233.0     13.9      0.1          np.shape(sig_stft_db)[1],
    95       161       4559.0     28.3      0.1          axis=0,
    96                                               ).T
    97                                               # mask if the signal is above the threshold
    98       161       2395.0     14.9      0.1      sig_mask = sig_stft_db < db_thresh
    99                                           
   100                                               # Create a smoothing filter for the mask in time and frequency
   101       161     133190.0    827.3      4.3      smoothing_filter = _smoothing_filter(n_grad_freq, n_grad_time)
   102                                           
   103                                               # convolve the mask with a smoothing filter
   104       161     494481.0   3071.3     15.8      sig_mask = convolve_gaussian(sig_mask, smoothing_filter, use_tensorflow)
   105                                           
   106       161       1020.0      6.3      0.0      sig_mask = scipy.signal.fftconvolve(
   107       161     468384.0   2909.2     15.0          sig_mask, smoothing_filter, mode="same")
   108       161      11314.0     70.3      0.4      sig_mask = sig_mask * prop_decrease
   109                                           
   110                                               # mask the signal
   111                                           
   112       161        617.0      3.8      0.0      sig_stft_amp, sig_stft_db_masked = mask_signal(
   113       161     255686.0   1588.1      8.2          sig_stft_db, sig_mask, mask_gain_dB, sig_stft
   114                                               )
   115                                           
   116                                               # recover the signal
   117       161        762.0      4.7      0.0      recovered_signal = _istft(
   118       161     765931.0   4757.3     24.5          sig_stft_amp, n_fft, hop_length, win_length, use_tensorflow=use_tensorflow
   119                                               )
   120                                               # fix the recovered signal length if padding signal
   121       161        746.0      4.6      0.0      if pad_clipping:
   122       161       3513.0     21.8      0.1          recovered_signal = librosa.util.fix_length(recovered_signal, nsamp)
   123                                           
   124       161        460.0      2.9      0.0      recovered_spec = _amp_to_db(
   125       161        492.0      3.1      0.0          np.abs(
   126       161        399.0      2.5      0.0              _stft(
   127       161        384.0      2.4      0.0                  recovered_signal,
   128       161        377.0      2.3      0.0                  n_fft,
   129       161        384.0      2.4      0.0                  hop_length,
   130       161        368.0      2.3      0.0                  win_length,
   131       161     373338.0   2318.9     11.9                  use_tensorflow=use_tensorflow,
   132                                                       )
   133                                                   )
   134                                               )
   135       161        716.0      4.4      0.0      return recovered_signal